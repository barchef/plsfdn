{"version":3,"file":"static/js/396.b62619f1.chunk.js","mappings":"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","sources":["../node_modules/@metamask/post-message-stream/dist/BasePostMessageStream.js","../node_modules/@metamask/post-message-stream/dist/WebWorker/WebWorkerParentPostMessageStream.js","../node_modules/@metamask/post-message-stream/dist/WebWorker/WebWorkerPostMessageStream.js","../node_modules/@metamask/post-message-stream/dist/browser.js","../node_modules/@metamask/post-message-stream/dist/runtime/BrowserRuntimePostMessageStream.js","../node_modules/@metamask/post-message-stream/dist/utils.js","../node_modules/@metamask/post-message-stream/dist/window/WindowPostMessageStream.js","../node_modules/@metamask/post-message-stream/node_modules/@metamask/utils/dist/assert.js","../node_modules/@metamask/post-message-stream/node_modules/@metamask/utils/dist/base64.js","../node_modules/@metamask/post-message-stream/node_modules/@metamask/utils/dist/bytes.js","../node_modules/@metamask/post-message-stream/node_modules/@metamask/utils/dist/checksum.js","../node_modules/@metamask/post-message-stream/node_modules/@metamask/utils/dist/coercers.js","../node_modules/@metamask/post-message-stream/node_modules/@metamask/utils/dist/collections.js","../node_modules/@metamask/post-message-stream/node_modules/@metamask/utils/dist/encryption-types.js","../node_modules/@metamask/post-message-stream/node_modules/@metamask/utils/dist/hex.js","../node_modules/@metamask/post-message-stream/node_modules/@metamask/utils/dist/index.js","../node_modules/@metamask/post-message-stream/node_modules/@metamask/utils/dist/json.js","../node_modules/@metamask/post-message-stream/node_modules/@metamask/utils/dist/keyring.js","../node_modules/@metamask/post-message-stream/node_modules/@metamask/utils/dist/logging.js","../node_modules/@metamask/post-message-stream/node_modules/@metamask/utils/dist/misc.js","../node_modules/@metamask/post-message-stream/node_modules/@metamask/utils/dist/number.js","../node_modules/@metamask/post-message-stream/node_modules/@metamask/utils/dist/opaque.js","../node_modules/@metamask/post-message-stream/node_modules/@metamask/utils/dist/time.js","../node_modules/@metamask/post-message-stream/node_modules/@metamask/utils/dist/transaction-types.js","../node_modules/@metamask/post-message-stream/node_modules/@metamask/utils/dist/versions.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BasePostMessageStream = void 0;\nconst readable_stream_1 = require(\"readable-stream\");\nconst noop = () => undefined;\nconst SYN = 'SYN';\nconst ACK = 'ACK';\n/**\n * Abstract base class for postMessage streams.\n */\nclass BasePostMessageStream extends readable_stream_1.Duplex {\n    constructor() {\n        super({\n            objectMode: true,\n        });\n        // Initialization flags\n        this._init = false;\n        this._haveSyn = false;\n        this._log = () => null;\n    }\n    /**\n     * Must be called at end of child constructor to initiate\n     * communication with other end.\n     */\n    _handshake() {\n        // Send synchronization message\n        this._write(SYN, null, noop);\n        this.cork();\n    }\n    _onData(data) {\n        if (this._init) {\n            // Forward message\n            try {\n                this.push(data);\n                this._log(data, false);\n            }\n            catch (err) {\n                this.emit('error', err);\n            }\n        }\n        else if (data === SYN) {\n            // Listen for handshake\n            this._haveSyn = true;\n            this._write(ACK, null, noop);\n        }\n        else if (data === ACK) {\n            this._init = true;\n            if (!this._haveSyn) {\n                this._write(ACK, null, noop);\n            }\n            this.uncork();\n        }\n    }\n    _read() {\n        return undefined;\n    }\n    _write(data, _encoding, cb) {\n        if (data !== ACK && data !== SYN) {\n            this._log(data, true);\n        }\n        this._postMessage(data);\n        cb();\n    }\n    _setLogger(log) {\n        this._log = log;\n    }\n}\nexports.BasePostMessageStream = BasePostMessageStream;\n//# sourceMappingURL=BasePostMessageStream.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WebWorkerParentPostMessageStream = void 0;\nconst BasePostMessageStream_1 = require(\"../BasePostMessageStream\");\nconst utils_1 = require(\"../utils\");\n/**\n * Parent-side dedicated `WebWorker.postMessage` stream. Designed for use with\n * dedicated workers only.\n */\nclass WebWorkerParentPostMessageStream extends BasePostMessageStream_1.BasePostMessageStream {\n    /**\n     * Creates a stream for communicating with a dedicated `WebWorker`.\n     *\n     * @param args - Options bag.\n     * @param args.worker - The Web Worker to exchange messages with. The worker\n     * must instantiate a `WebWorkerPostMessageStream`.\n     */\n    constructor({ worker }) {\n        super();\n        this._target = utils_1.DEDICATED_WORKER_NAME;\n        this._worker = worker;\n        this._worker.onmessage = this._onMessage.bind(this);\n        this._handshake();\n    }\n    _postMessage(data) {\n        this._worker.postMessage({\n            target: this._target,\n            data,\n        });\n    }\n    _onMessage(event) {\n        const message = event.data;\n        if (!(0, utils_1.isValidStreamMessage)(message)) {\n            return;\n        }\n        this._onData(message.data);\n    }\n    _destroy() {\n        this._worker.onmessage = null;\n        this._worker = null;\n    }\n}\nexports.WebWorkerParentPostMessageStream = WebWorkerParentPostMessageStream;\n//# sourceMappingURL=WebWorkerParentPostMessageStream.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WebWorkerPostMessageStream = void 0;\n// We ignore coverage for the entire file due to limits on our instrumentation,\n// but it is in fact covered by our tests.\nconst BasePostMessageStream_1 = require(\"../BasePostMessageStream\");\nconst utils_1 = require(\"../utils\");\n/**\n * Worker-side dedicated `WebWorker.postMessage` stream. Designed for use with\n * dedicated workers only.\n */\nclass WebWorkerPostMessageStream extends BasePostMessageStream_1.BasePostMessageStream {\n    constructor() {\n        // Kudos: https://stackoverflow.com/a/18002694\n        if (typeof self === 'undefined' ||\n            // @ts-expect-error: No types for WorkerGlobalScope\n            typeof WorkerGlobalScope === 'undefined') {\n            throw new Error('WorkerGlobalScope not found. This class should only be instantiated in a WebWorker.');\n        }\n        super();\n        this._name = utils_1.DEDICATED_WORKER_NAME;\n        self.addEventListener('message', this._onMessage.bind(this));\n        this._handshake();\n    }\n    _postMessage(data) {\n        // Cast of self.postMessage due to usage of DOM lib\n        self.postMessage({ data });\n    }\n    _onMessage(event) {\n        const message = event.data;\n        // validate message\n        if (!(0, utils_1.isValidStreamMessage)(message) || message.target !== this._name) {\n            return;\n        }\n        this._onData(message.data);\n    }\n    // worker stream lifecycle assumed to be coterminous with global scope\n    _destroy() {\n        return undefined;\n    }\n}\nexports.WebWorkerPostMessageStream = WebWorkerPostMessageStream;\n//# sourceMappingURL=WebWorkerPostMessageStream.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// Exports a subset of functionality for browsers\n__exportStar(require(\"./window/WindowPostMessageStream\"), exports);\n__exportStar(require(\"./WebWorker/WebWorkerPostMessageStream\"), exports);\n__exportStar(require(\"./WebWorker/WebWorkerParentPostMessageStream\"), exports);\n__exportStar(require(\"./runtime/BrowserRuntimePostMessageStream\"), exports);\n__exportStar(require(\"./BasePostMessageStream\"), exports);\n//# sourceMappingURL=browser.js.map","\"use strict\";\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _BrowserRuntimePostMessageStream_name, _BrowserRuntimePostMessageStream_target;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BrowserRuntimePostMessageStream = void 0;\nconst BasePostMessageStream_1 = require(\"../BasePostMessageStream\");\nconst utils_1 = require(\"../utils\");\n/**\n * A {@link browser.runtime} stream.\n */\nclass BrowserRuntimePostMessageStream extends BasePostMessageStream_1.BasePostMessageStream {\n    /**\n     * Creates a stream for communicating with other streams across the extension\n     * runtime.\n     *\n     * @param args - Options bag.\n     * @param args.name - The name of the stream. Used to differentiate between\n     * multiple streams sharing the same runtime.\n     * @param args.target - The name of the stream to exchange messages with.\n     */\n    constructor({ name, target }) {\n        super();\n        _BrowserRuntimePostMessageStream_name.set(this, void 0);\n        _BrowserRuntimePostMessageStream_target.set(this, void 0);\n        __classPrivateFieldSet(this, _BrowserRuntimePostMessageStream_name, name, \"f\");\n        __classPrivateFieldSet(this, _BrowserRuntimePostMessageStream_target, target, \"f\");\n        this._onMessage = this._onMessage.bind(this);\n        this._getRuntime().onMessage.addListener(this._onMessage);\n        this._handshake();\n    }\n    _postMessage(data) {\n        // This returns a Promise, which resolves if the receiver responds to the\n        // message. Rather than responding to specific messages, we send new\n        // messages in response to incoming messages, so we don't care about the\n        // Promise.\n        this._getRuntime().sendMessage({\n            target: __classPrivateFieldGet(this, _BrowserRuntimePostMessageStream_target, \"f\"),\n            data,\n        });\n    }\n    _onMessage(message) {\n        if (!(0, utils_1.isValidStreamMessage)(message) || message.target !== __classPrivateFieldGet(this, _BrowserRuntimePostMessageStream_name, \"f\")) {\n            return;\n        }\n        this._onData(message.data);\n    }\n    _getRuntime() {\n        var _a, _b;\n        if ('chrome' in globalThis &&\n            typeof ((_a = chrome === null || chrome === void 0 ? void 0 : chrome.runtime) === null || _a === void 0 ? void 0 : _a.sendMessage) === 'function') {\n            return chrome.runtime;\n        }\n        if ('browser' in globalThis &&\n            typeof ((_b = browser === null || browser === void 0 ? void 0 : browser.runtime) === null || _b === void 0 ? void 0 : _b.sendMessage) === 'function') {\n            return browser.runtime;\n        }\n        throw new Error('browser.runtime.sendMessage is not a function. This class should only be instantiated in a web extension.');\n    }\n    _destroy() {\n        this._getRuntime().onMessage.removeListener(this._onMessage);\n    }\n}\nexports.BrowserRuntimePostMessageStream = BrowserRuntimePostMessageStream;\n_BrowserRuntimePostMessageStream_name = new WeakMap(), _BrowserRuntimePostMessageStream_target = new WeakMap();\n//# sourceMappingURL=BrowserRuntimePostMessageStream.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isValidStreamMessage = exports.DEDICATED_WORKER_NAME = void 0;\nconst utils_1 = require(\"@metamask/utils\");\nexports.DEDICATED_WORKER_NAME = 'dedicatedWorker';\n/**\n * Checks whether the specified stream event message is valid per the\n * expectations of this library.\n *\n * @param message - The stream event message property.\n * @returns Whether the `message` is a valid stream message.\n */\nfunction isValidStreamMessage(message) {\n    return ((0, utils_1.isObject)(message) &&\n        Boolean(message.data) &&\n        (typeof message.data === 'number' ||\n            typeof message.data === 'object' ||\n            typeof message.data === 'string'));\n}\nexports.isValidStreamMessage = isValidStreamMessage;\n//# sourceMappingURL=utils.js.map","\"use strict\";\nvar _a, _b;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WindowPostMessageStream = void 0;\nconst utils_1 = require(\"@metamask/utils\");\nconst BasePostMessageStream_1 = require(\"../BasePostMessageStream\");\nconst utils_2 = require(\"../utils\");\n/* istanbul ignore next */\nconst getSource = (_a = Object.getOwnPropertyDescriptor(MessageEvent.prototype, 'source')) === null || _a === void 0 ? void 0 : _a.get;\n(0, utils_1.assert)(getSource, 'MessageEvent.prototype.source getter is not defined.');\n/* istanbul ignore next */\nconst getOrigin = (_b = Object.getOwnPropertyDescriptor(MessageEvent.prototype, 'origin')) === null || _b === void 0 ? void 0 : _b.get;\n(0, utils_1.assert)(getOrigin, 'MessageEvent.prototype.origin getter is not defined.');\n/**\n * A {@link Window.postMessage} stream.\n */\nclass WindowPostMessageStream extends BasePostMessageStream_1.BasePostMessageStream {\n    /**\n     * Creates a stream for communicating with other streams across the same or\n     * different `window` objects.\n     *\n     * @param args - Options bag.\n     * @param args.name - The name of the stream. Used to differentiate between\n     * multiple streams sharing the same window object.\n     * @param args.target - The name of the stream to exchange messages with.\n     * @param args.targetOrigin - The origin of the target. Defaults to\n     * `location.origin`, '*' is permitted.\n     * @param args.targetWindow - The window object of the target stream. Defaults\n     * to `window`.\n     */\n    constructor({ name, target, targetOrigin = location.origin, targetWindow = window, }) {\n        super();\n        if (typeof window === 'undefined' ||\n            typeof window.postMessage !== 'function') {\n            throw new Error('window.postMessage is not a function. This class should only be instantiated in a Window.');\n        }\n        this._name = name;\n        this._target = target;\n        this._targetOrigin = targetOrigin;\n        this._targetWindow = targetWindow;\n        this._onMessage = this._onMessage.bind(this);\n        window.addEventListener('message', this._onMessage, false);\n        this._handshake();\n    }\n    _postMessage(data) {\n        this._targetWindow.postMessage({\n            target: this._target,\n            data,\n        }, this._targetOrigin);\n    }\n    _onMessage(event) {\n        const message = event.data;\n        /* eslint-disable @typescript-eslint/no-non-null-assertion */\n        if ((this._targetOrigin !== '*' &&\n            getOrigin.call(event) !== this._targetOrigin) ||\n            getSource.call(event) !== this._targetWindow ||\n            !(0, utils_2.isValidStreamMessage)(message) ||\n            message.target !== this._name) {\n            return;\n        }\n        /* eslint-enable @typescript-eslint/no-non-null-assertion */\n        this._onData(message.data);\n    }\n    _destroy() {\n        window.removeEventListener('message', this._onMessage, false);\n    }\n}\nexports.WindowPostMessageStream = WindowPostMessageStream;\n//# sourceMappingURL=WindowPostMessageStream.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.assertExhaustive = exports.assertStruct = exports.assert = exports.AssertionError = void 0;\nconst superstruct_1 = require(\"superstruct\");\n/**\n * Type guard for determining whether the given value is an error object with a\n * `message` property, such as an instance of Error.\n *\n * @param error - The object to check.\n * @returns True or false, depending on the result.\n */\nfunction isErrorWithMessage(error) {\n    return typeof error === 'object' && error !== null && 'message' in error;\n}\n/**\n * Check if a value is a constructor, i.e., a function that can be called with\n * the `new` keyword.\n *\n * @param fn - The value to check.\n * @returns `true` if the value is a constructor, or `false` otherwise.\n */\nfunction isConstructable(fn) {\n    var _a, _b;\n    /* istanbul ignore next */\n    return Boolean(typeof ((_b = (_a = fn === null || fn === void 0 ? void 0 : fn.prototype) === null || _a === void 0 ? void 0 : _a.constructor) === null || _b === void 0 ? void 0 : _b.name) === 'string');\n}\n/**\n * Get the error message from an unknown error object. If the error object has\n * a `message` property, that property is returned. Otherwise, the stringified\n * error object is returned.\n *\n * @param error - The error object to get the message from.\n * @returns The error message.\n */\nfunction getErrorMessage(error) {\n    const message = isErrorWithMessage(error) ? error.message : String(error);\n    // If the error ends with a period, remove it, as we'll add our own period.\n    if (message.endsWith('.')) {\n        return message.slice(0, -1);\n    }\n    return message;\n}\n/**\n * Initialise an {@link AssertionErrorConstructor} error.\n *\n * @param ErrorWrapper - The error class to use.\n * @param message - The error message.\n * @returns The error object.\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nfunction getError(ErrorWrapper, message) {\n    if (isConstructable(ErrorWrapper)) {\n        return new ErrorWrapper({\n            message,\n        });\n    }\n    return ErrorWrapper({\n        message,\n    });\n}\n/**\n * The default error class that is thrown if an assertion fails.\n */\nclass AssertionError extends Error {\n    constructor(options) {\n        super(options.message);\n        this.code = 'ERR_ASSERTION';\n    }\n}\nexports.AssertionError = AssertionError;\n/**\n * Same as Node.js assert.\n * If the value is falsy, throws an error, does nothing otherwise.\n *\n * @throws {@link AssertionError} If value is falsy.\n * @param value - The test that should be truthy to pass.\n * @param message - Message to be passed to {@link AssertionError} or an\n * {@link Error} instance to throw.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}. If a custom error class is provided for\n * the `message` argument, this argument is ignored.\n */\nfunction assert(value, message = 'Assertion failed.', \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper = AssertionError) {\n    if (!value) {\n        if (message instanceof Error) {\n            throw message;\n        }\n        throw getError(ErrorWrapper, message);\n    }\n}\nexports.assert = assert;\n/**\n * Assert a value against a Superstruct struct.\n *\n * @param value - The value to validate.\n * @param struct - The struct to validate against.\n * @param errorPrefix - A prefix to add to the error message. Defaults to\n * \"Assertion failed\".\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the value is not valid.\n */\nfunction assertStruct(value, struct, errorPrefix = 'Assertion failed', \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper = AssertionError) {\n    try {\n        (0, superstruct_1.assert)(value, struct);\n    }\n    catch (error) {\n        throw getError(ErrorWrapper, `${errorPrefix}: ${getErrorMessage(error)}.`);\n    }\n}\nexports.assertStruct = assertStruct;\n/**\n * Use in the default case of a switch that you want to be fully exhaustive.\n * Using this function forces the compiler to enforce exhaustivity during\n * compile-time.\n *\n * @example\n * ```\n * const number = 1;\n * switch (number) {\n *   case 0:\n *     ...\n *   case 1:\n *     ...\n *   default:\n *     assertExhaustive(snapPrefix);\n * }\n * ```\n * @param _object - The object on which the switch is being operated.\n */\nfunction assertExhaustive(_object) {\n    throw new Error('Invalid branch reached. Should be detected during compilation.');\n}\nexports.assertExhaustive = assertExhaustive;\n//# sourceMappingURL=assert.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.base64 = void 0;\nconst superstruct_1 = require(\"superstruct\");\nconst assert_1 = require(\"./assert\");\n/**\n * Ensure that a provided string-based struct is valid base64.\n *\n * @param struct - The string based struct.\n * @param options - Optional options to specialize base64 validation. See {@link Base64Options} documentation.\n * @returns A superstruct validating base64.\n */\nconst base64 = (struct, options = {}) => {\n    var _a, _b;\n    const paddingRequired = (_a = options.paddingRequired) !== null && _a !== void 0 ? _a : false;\n    const characterSet = (_b = options.characterSet) !== null && _b !== void 0 ? _b : 'base64';\n    let letters;\n    if (characterSet === 'base64') {\n        letters = String.raw `[A-Za-z0-9+\\/]`;\n    }\n    else {\n        (0, assert_1.assert)(characterSet === 'base64url');\n        letters = String.raw `[-_A-Za-z0-9]`;\n    }\n    let re;\n    if (paddingRequired) {\n        re = new RegExp(`^(?:${letters}{4})*(?:${letters}{3}=|${letters}{2}==)?$`, 'u');\n    }\n    else {\n        re = new RegExp(`^(?:${letters}{4})*(?:${letters}{2,3}|${letters}{3}=|${letters}{2}==)?$`, 'u');\n    }\n    return (0, superstruct_1.pattern)(struct, re);\n};\nexports.base64 = base64;\n//# sourceMappingURL=base64.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createDataView = exports.concatBytes = exports.valueToBytes = exports.stringToBytes = exports.numberToBytes = exports.signedBigIntToBytes = exports.bigIntToBytes = exports.hexToBytes = exports.bytesToString = exports.bytesToNumber = exports.bytesToSignedBigInt = exports.bytesToBigInt = exports.bytesToHex = exports.assertIsBytes = exports.isBytes = void 0;\nconst assert_1 = require(\"./assert\");\nconst hex_1 = require(\"./hex\");\n// '0'.charCodeAt(0) === 48\nconst HEX_MINIMUM_NUMBER_CHARACTER = 48;\n// '9'.charCodeAt(0) === 57\nconst HEX_MAXIMUM_NUMBER_CHARACTER = 58;\nconst HEX_CHARACTER_OFFSET = 87;\n/**\n * Memoized function that returns an array to be used as a lookup table for\n * converting bytes to hexadecimal values.\n *\n * The array is created lazily and then cached for future use. The benefit of\n * this approach is that the performance of converting bytes to hex is much\n * better than if we were to call `toString(16)` on each byte.\n *\n * The downside is that the array is created once and then never garbage\n * collected. This is not a problem in practice because the array is only 256\n * elements long.\n *\n * @returns A function that returns the lookup table.\n */\nfunction getPrecomputedHexValuesBuilder() {\n    // To avoid issues with tree shaking, we need to use a function to return the\n    // array. This is because the array is only used in the `bytesToHex` function\n    // and if we were to use a global variable, the array might be removed by the\n    // tree shaker.\n    const lookupTable = [];\n    return () => {\n        if (lookupTable.length === 0) {\n            for (let i = 0; i < 256; i++) {\n                lookupTable.push(i.toString(16).padStart(2, '0'));\n            }\n        }\n        return lookupTable;\n    };\n}\n/**\n * Function implementation of the {@link getPrecomputedHexValuesBuilder}\n * function.\n */\nconst getPrecomputedHexValues = getPrecomputedHexValuesBuilder();\n/**\n * Check if a value is a `Uint8Array`.\n *\n * @param value - The value to check.\n * @returns Whether the value is a `Uint8Array`.\n */\nfunction isBytes(value) {\n    return value instanceof Uint8Array;\n}\nexports.isBytes = isBytes;\n/**\n * Assert that a value is a `Uint8Array`.\n *\n * @param value - The value to check.\n * @throws If the value is not a `Uint8Array`.\n */\nfunction assertIsBytes(value) {\n    (0, assert_1.assert)(isBytes(value), 'Value must be a Uint8Array.');\n}\nexports.assertIsBytes = assertIsBytes;\n/**\n * Convert a `Uint8Array` to a hexadecimal string.\n *\n * @param bytes - The bytes to convert to a hexadecimal string.\n * @returns The hexadecimal string.\n */\nfunction bytesToHex(bytes) {\n    assertIsBytes(bytes);\n    if (bytes.length === 0) {\n        return '0x';\n    }\n    const lookupTable = getPrecomputedHexValues();\n    const hexadecimal = new Array(bytes.length);\n    for (let i = 0; i < bytes.length; i++) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        hexadecimal[i] = lookupTable[bytes[i]];\n    }\n    return (0, hex_1.add0x)(hexadecimal.join(''));\n}\nexports.bytesToHex = bytesToHex;\n/**\n * Convert a `Uint8Array` to a `bigint`.\n *\n * To convert a `Uint8Array` to a `number` instead, use {@link bytesToNumber}.\n * To convert a two's complement encoded `Uint8Array` to a `bigint`, use\n * {@link bytesToSignedBigInt}.\n *\n * @param bytes - The bytes to convert to a `bigint`.\n * @returns The `bigint`.\n */\nfunction bytesToBigInt(bytes) {\n    assertIsBytes(bytes);\n    const hexadecimal = bytesToHex(bytes);\n    return BigInt(hexadecimal);\n}\nexports.bytesToBigInt = bytesToBigInt;\n/**\n * Convert a `Uint8Array` to a signed `bigint`. This assumes that the bytes are\n * encoded in two's complement.\n *\n * To convert a `Uint8Array` to an unsigned `bigint` instead, use\n * {@link bytesToBigInt}.\n *\n * @see https://en.wikipedia.org/wiki/Two%27s_complement\n * @param bytes - The bytes to convert to a signed `bigint`.\n * @returns The signed `bigint`.\n */\nfunction bytesToSignedBigInt(bytes) {\n    assertIsBytes(bytes);\n    let value = BigInt(0);\n    for (const byte of bytes) {\n        // eslint-disable-next-line no-bitwise\n        value = (value << BigInt(8)) + BigInt(byte);\n    }\n    return BigInt.asIntN(bytes.length * 8, value);\n}\nexports.bytesToSignedBigInt = bytesToSignedBigInt;\n/**\n * Convert a `Uint8Array` to a `number`.\n *\n * To convert a `Uint8Array` to a `bigint` instead, use {@link bytesToBigInt}.\n *\n * @param bytes - The bytes to convert to a number.\n * @returns The number.\n * @throws If the resulting number is not a safe integer.\n */\nfunction bytesToNumber(bytes) {\n    assertIsBytes(bytes);\n    const bigint = bytesToBigInt(bytes);\n    (0, assert_1.assert)(bigint <= BigInt(Number.MAX_SAFE_INTEGER), 'Number is not a safe integer. Use `bytesToBigInt` instead.');\n    return Number(bigint);\n}\nexports.bytesToNumber = bytesToNumber;\n/**\n * Convert a UTF-8 encoded `Uint8Array` to a `string`.\n *\n * @param bytes - The bytes to convert to a string.\n * @returns The string.\n */\nfunction bytesToString(bytes) {\n    assertIsBytes(bytes);\n    return new TextDecoder().decode(bytes);\n}\nexports.bytesToString = bytesToString;\n/**\n * Convert a hexadecimal string to a `Uint8Array`. The string can optionally be\n * prefixed with `0x`. It accepts even and odd length strings.\n *\n * If the value is \"0x\", an empty `Uint8Array` is returned.\n *\n * @param value - The hexadecimal string to convert to bytes.\n * @returns The bytes as `Uint8Array`.\n */\nfunction hexToBytes(value) {\n    var _a;\n    // \"0x\" is often used as empty byte array.\n    if (((_a = value === null || value === void 0 ? void 0 : value.toLowerCase) === null || _a === void 0 ? void 0 : _a.call(value)) === '0x') {\n        return new Uint8Array();\n    }\n    (0, hex_1.assertIsHexString)(value);\n    // Remove the `0x` prefix if it exists, and pad the string to have an even\n    // number of characters.\n    const strippedValue = (0, hex_1.remove0x)(value).toLowerCase();\n    const normalizedValue = strippedValue.length % 2 === 0 ? strippedValue : `0${strippedValue}`;\n    const bytes = new Uint8Array(normalizedValue.length / 2);\n    for (let i = 0; i < bytes.length; i++) {\n        // While this is not the prettiest way to convert a hexadecimal string to a\n        // `Uint8Array`, it is a lot faster than using `parseInt` to convert each\n        // character.\n        const c1 = normalizedValue.charCodeAt(i * 2);\n        const c2 = normalizedValue.charCodeAt(i * 2 + 1);\n        const n1 = c1 -\n            (c1 < HEX_MAXIMUM_NUMBER_CHARACTER\n                ? HEX_MINIMUM_NUMBER_CHARACTER\n                : HEX_CHARACTER_OFFSET);\n        const n2 = c2 -\n            (c2 < HEX_MAXIMUM_NUMBER_CHARACTER\n                ? HEX_MINIMUM_NUMBER_CHARACTER\n                : HEX_CHARACTER_OFFSET);\n        bytes[i] = n1 * 16 + n2;\n    }\n    return bytes;\n}\nexports.hexToBytes = hexToBytes;\n/**\n * Convert a `bigint` to a `Uint8Array`.\n *\n * This assumes that the `bigint` is an unsigned integer. To convert a signed\n * `bigint` instead, use {@link signedBigIntToBytes}.\n *\n * @param value - The bigint to convert to bytes.\n * @returns The bytes as `Uint8Array`.\n */\nfunction bigIntToBytes(value) {\n    (0, assert_1.assert)(typeof value === 'bigint', 'Value must be a bigint.');\n    (0, assert_1.assert)(value >= BigInt(0), 'Value must be a non-negative bigint.');\n    const hexadecimal = value.toString(16);\n    return hexToBytes(hexadecimal);\n}\nexports.bigIntToBytes = bigIntToBytes;\n/**\n * Check if a `bigint` fits in a certain number of bytes.\n *\n * @param value - The `bigint` to check.\n * @param bytes - The number of bytes.\n * @returns Whether the `bigint` fits in the number of bytes.\n */\nfunction bigIntFits(value, bytes) {\n    (0, assert_1.assert)(bytes > 0);\n    /* eslint-disable no-bitwise */\n    const mask = value >> BigInt(31);\n    return !(((~value & mask) + (value & ~mask)) >> BigInt(bytes * 8 + ~0));\n    /* eslint-enable no-bitwise */\n}\n/**\n * Convert a signed `bigint` to a `Uint8Array`. This uses two's complement\n * encoding to represent negative numbers.\n *\n * To convert an unsigned `bigint` to a `Uint8Array` instead, use\n * {@link bigIntToBytes}.\n *\n * @see https://en.wikipedia.org/wiki/Two%27s_complement\n * @param value - The number to convert to bytes.\n * @param byteLength - The length of the resulting `Uint8Array`. If the number\n * is larger than the maximum value that can be represented by the given length,\n * an error is thrown.\n * @returns The bytes as `Uint8Array`.\n */\nfunction signedBigIntToBytes(value, byteLength) {\n    (0, assert_1.assert)(typeof value === 'bigint', 'Value must be a bigint.');\n    (0, assert_1.assert)(typeof byteLength === 'number', 'Byte length must be a number.');\n    (0, assert_1.assert)(byteLength > 0, 'Byte length must be greater than 0.');\n    (0, assert_1.assert)(bigIntFits(value, byteLength), 'Byte length is too small to represent the given value.');\n    // ESLint doesn't like mutating function parameters, so to avoid having to\n    // disable the rule, we create a new variable.\n    let numberValue = value;\n    const bytes = new Uint8Array(byteLength);\n    for (let i = 0; i < bytes.length; i++) {\n        bytes[i] = Number(BigInt.asUintN(8, numberValue));\n        // eslint-disable-next-line no-bitwise\n        numberValue >>= BigInt(8);\n    }\n    return bytes.reverse();\n}\nexports.signedBigIntToBytes = signedBigIntToBytes;\n/**\n * Convert a `number` to a `Uint8Array`.\n *\n * @param value - The number to convert to bytes.\n * @returns The bytes as `Uint8Array`.\n * @throws If the number is not a safe integer.\n */\nfunction numberToBytes(value) {\n    (0, assert_1.assert)(typeof value === 'number', 'Value must be a number.');\n    (0, assert_1.assert)(value >= 0, 'Value must be a non-negative number.');\n    (0, assert_1.assert)(Number.isSafeInteger(value), 'Value is not a safe integer. Use `bigIntToBytes` instead.');\n    const hexadecimal = value.toString(16);\n    return hexToBytes(hexadecimal);\n}\nexports.numberToBytes = numberToBytes;\n/**\n * Convert a `string` to a UTF-8 encoded `Uint8Array`.\n *\n * @param value - The string to convert to bytes.\n * @returns The bytes as `Uint8Array`.\n */\nfunction stringToBytes(value) {\n    (0, assert_1.assert)(typeof value === 'string', 'Value must be a string.');\n    return new TextEncoder().encode(value);\n}\nexports.stringToBytes = stringToBytes;\n/**\n * Convert a byte-like value to a `Uint8Array`. The value can be a `Uint8Array`,\n * a `bigint`, a `number`, or a `string`.\n *\n * This will attempt to guess the type of the value based on its type and\n * contents. For more control over the conversion, use the more specific\n * conversion functions, such as {@link hexToBytes} or {@link stringToBytes}.\n *\n * If the value is a `string`, and it is prefixed with `0x`, it will be\n * interpreted as a hexadecimal string. Otherwise, it will be interpreted as a\n * UTF-8 string. To convert a hexadecimal string to bytes without interpreting\n * it as a UTF-8 string, use {@link hexToBytes} instead.\n *\n * If the value is a `bigint`, it is assumed to be unsigned. To convert a signed\n * `bigint` to bytes, use {@link signedBigIntToBytes} instead.\n *\n * If the value is a `Uint8Array`, it will be returned as-is.\n *\n * @param value - The value to convert to bytes.\n * @returns The bytes as `Uint8Array`.\n */\nfunction valueToBytes(value) {\n    if (typeof value === 'bigint') {\n        return bigIntToBytes(value);\n    }\n    if (typeof value === 'number') {\n        return numberToBytes(value);\n    }\n    if (typeof value === 'string') {\n        if (value.startsWith('0x')) {\n            return hexToBytes(value);\n        }\n        return stringToBytes(value);\n    }\n    if (isBytes(value)) {\n        return value;\n    }\n    throw new TypeError(`Unsupported value type: \"${typeof value}\".`);\n}\nexports.valueToBytes = valueToBytes;\n/**\n * Concatenate multiple byte-like values into a single `Uint8Array`. The values\n * can be `Uint8Array`, `bigint`, `number`, or `string`. This uses\n * {@link valueToBytes} under the hood to convert each value to bytes. Refer to\n * the documentation of that function for more information.\n *\n * @param values - The values to concatenate.\n * @returns The concatenated bytes as `Uint8Array`.\n */\nfunction concatBytes(values) {\n    const normalizedValues = new Array(values.length);\n    let byteLength = 0;\n    for (let i = 0; i < values.length; i++) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const value = valueToBytes(values[i]);\n        normalizedValues[i] = value;\n        byteLength += value.length;\n    }\n    const bytes = new Uint8Array(byteLength);\n    for (let i = 0, offset = 0; i < normalizedValues.length; i++) {\n        // While we could simply spread the values into an array and use\n        // `Uint8Array.from`, that is a lot slower than using `Uint8Array.set`.\n        bytes.set(normalizedValues[i], offset);\n        offset += normalizedValues[i].length;\n    }\n    return bytes;\n}\nexports.concatBytes = concatBytes;\n/**\n * Create a {@link DataView} from a {@link Uint8Array}. This is a convenience\n * function that avoids having to create a {@link DataView} manually, which\n * requires passing the `byteOffset` and `byteLength` parameters every time.\n *\n * Not passing the `byteOffset` and `byteLength` parameters can result in\n * unexpected behavior when the {@link Uint8Array} is a view of a larger\n * {@link ArrayBuffer}, e.g., when using {@link Uint8Array.subarray}.\n *\n * This function also supports Node.js {@link Buffer}s.\n *\n * @example\n * ```typescript\n * const bytes = new Uint8Array([1, 2, 3]);\n *\n * // This is equivalent to:\n * // const dataView = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);\n * const dataView = createDataView(bytes);\n * ```\n * @param bytes - The bytes to create the {@link DataView} from.\n * @returns The {@link DataView}.\n */\nfunction createDataView(bytes) {\n    // To maintain compatibility with Node.js, we need to check if the bytes are\n    // a Buffer. If so, we need to slice the buffer to get the underlying\n    // ArrayBuffer.\n    // eslint-disable-next-line no-restricted-globals\n    if (typeof Buffer !== 'undefined' && bytes instanceof Buffer) {\n        const buffer = bytes.buffer.slice(bytes.byteOffset, bytes.byteOffset + bytes.byteLength);\n        return new DataView(buffer);\n    }\n    return new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);\n}\nexports.createDataView = createDataView;\n//# sourceMappingURL=bytes.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ChecksumStruct = void 0;\nconst superstruct_1 = require(\"superstruct\");\nconst base64_1 = require(\"./base64\");\nexports.ChecksumStruct = (0, superstruct_1.size)((0, base64_1.base64)((0, superstruct_1.string)(), { paddingRequired: true }), 44, 44);\n//# sourceMappingURL=checksum.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createHex = exports.createBytes = exports.createBigInt = exports.createNumber = void 0;\nconst superstruct_1 = require(\"superstruct\");\nconst assert_1 = require(\"./assert\");\nconst bytes_1 = require(\"./bytes\");\nconst hex_1 = require(\"./hex\");\nconst NumberLikeStruct = (0, superstruct_1.union)([(0, superstruct_1.number)(), (0, superstruct_1.bigint)(), (0, superstruct_1.string)(), hex_1.StrictHexStruct]);\nconst NumberCoercer = (0, superstruct_1.coerce)((0, superstruct_1.number)(), NumberLikeStruct, Number);\nconst BigIntCoercer = (0, superstruct_1.coerce)((0, superstruct_1.bigint)(), NumberLikeStruct, BigInt);\nconst BytesLikeStruct = (0, superstruct_1.union)([hex_1.StrictHexStruct, (0, superstruct_1.instance)(Uint8Array)]);\nconst BytesCoercer = (0, superstruct_1.coerce)((0, superstruct_1.instance)(Uint8Array), (0, superstruct_1.union)([hex_1.StrictHexStruct]), bytes_1.hexToBytes);\nconst HexCoercer = (0, superstruct_1.coerce)(hex_1.StrictHexStruct, (0, superstruct_1.instance)(Uint8Array), bytes_1.bytesToHex);\n/**\n * Create a number from a number-like value.\n *\n * - If the value is a number, it is returned as-is.\n * - If the value is a `bigint`, it is converted to a number.\n * - If the value is a string, it is interpreted as a decimal number.\n * - If the value is a hex string (i.e., it starts with \"0x\"), it is\n * interpreted as a hexadecimal number.\n *\n * This validates that the value is a number-like value, and that the resulting\n * number is not `NaN` or `Infinity`.\n *\n * @example\n * ```typescript\n * const value = createNumber('0x010203');\n * console.log(value); // 66051\n *\n * const otherValue = createNumber(123n);\n * console.log(otherValue); // 123\n * ```\n * @param value - The value to create the number from.\n * @returns The created number.\n * @throws If the value is not a number-like value, or if the resulting number\n * is `NaN` or `Infinity`.\n */\nfunction createNumber(value) {\n    try {\n        const result = (0, superstruct_1.create)(value, NumberCoercer);\n        (0, assert_1.assert)(Number.isFinite(result), `Expected a number-like value, got \"${value}\".`);\n        return result;\n    }\n    catch (error) {\n        if (error instanceof superstruct_1.StructError) {\n            throw new Error(`Expected a number-like value, got \"${value}\".`);\n        }\n        /* istanbul ignore next */\n        throw error;\n    }\n}\nexports.createNumber = createNumber;\n/**\n * Create a `bigint` from a number-like value.\n *\n * - If the value is a number, it is converted to a `bigint`.\n * - If the value is a `bigint`, it is returned as-is.\n * - If the value is a string, it is interpreted as a decimal number and\n * converted to a `bigint`.\n * - If the value is a hex string (i.e., it starts with \"0x\"), it is\n * interpreted as a hexadecimal number and converted to a `bigint`.\n *\n * @example\n * ```typescript\n * const value = createBigInt('0x010203');\n * console.log(value); // 16909060n\n *\n * const otherValue = createBigInt(123);\n * console.log(otherValue); // 123n\n * ```\n * @param value - The value to create the bigint from.\n * @returns The created bigint.\n * @throws If the value is not a number-like value.\n */\nfunction createBigInt(value) {\n    try {\n        // The `BigInt` constructor throws if the value is not a number-like value.\n        // There is no need to validate the value manually.\n        return (0, superstruct_1.create)(value, BigIntCoercer);\n    }\n    catch (error) {\n        if (error instanceof superstruct_1.StructError) {\n            throw new Error(`Expected a number-like value, got \"${String(error.value)}\".`);\n        }\n        /* istanbul ignore next */\n        throw error;\n    }\n}\nexports.createBigInt = createBigInt;\n/**\n * Create a byte array from a bytes-like value.\n *\n * - If the value is a byte array, it is returned as-is.\n * - If the value is a hex string (i.e., it starts with \"0x\"), it is interpreted\n * as a hexadecimal number and converted to a byte array.\n *\n * @example\n * ```typescript\n * const value = createBytes('0x010203');\n * console.log(value); // Uint8Array [ 1, 2, 3 ]\n *\n * const otherValue = createBytes('0x010203');\n * console.log(otherValue); // Uint8Array [ 1, 2, 3 ]\n * ```\n * @param value - The value to create the byte array from.\n * @returns The created byte array.\n * @throws If the value is not a bytes-like value.\n */\nfunction createBytes(value) {\n    if (typeof value === 'string' && value.toLowerCase() === '0x') {\n        return new Uint8Array();\n    }\n    try {\n        return (0, superstruct_1.create)(value, BytesCoercer);\n    }\n    catch (error) {\n        if (error instanceof superstruct_1.StructError) {\n            throw new Error(`Expected a bytes-like value, got \"${String(error.value)}\".`);\n        }\n        /* istanbul ignore next */\n        throw error;\n    }\n}\nexports.createBytes = createBytes;\n/**\n * Create a hexadecimal string from a bytes-like value.\n *\n * - If the value is a hex string (i.e., it starts with \"0x\"), it is returned\n * as-is.\n * - If the value is a `Uint8Array`, it is converted to a hex string.\n *\n * @example\n * ```typescript\n * const value = createHex(new Uint8Array([1, 2, 3]));\n * console.log(value); // '0x010203'\n *\n * const otherValue = createHex('0x010203');\n * console.log(otherValue); // '0x010203'\n * ```\n * @param value - The value to create the hex string from.\n * @returns The created hex string.\n * @throws If the value is not a bytes-like value.\n */\nfunction createHex(value) {\n    if ((value instanceof Uint8Array && value.length === 0) ||\n        (typeof value === 'string' && value.toLowerCase() === '0x')) {\n        return '0x';\n    }\n    try {\n        return (0, superstruct_1.create)(value, HexCoercer);\n    }\n    catch (error) {\n        if (error instanceof superstruct_1.StructError) {\n            throw new Error(`Expected a bytes-like value, got \"${String(error.value)}\".`);\n        }\n        /* istanbul ignore next */\n        throw error;\n    }\n}\nexports.createHex = createHex;\n//# sourceMappingURL=coercers.js.map","\"use strict\";\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _FrozenMap_map, _FrozenSet_set;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FrozenSet = exports.FrozenMap = void 0;\n/**\n * A {@link ReadonlyMap} that cannot be modified after instantiation.\n * The implementation uses an inner map hidden via a private field, and the\n * immutability guarantee relies on it being impossible to get a reference\n * to this map.\n */\nclass FrozenMap {\n    constructor(entries) {\n        _FrozenMap_map.set(this, void 0);\n        __classPrivateFieldSet(this, _FrozenMap_map, new Map(entries), \"f\");\n        Object.freeze(this);\n    }\n    get size() {\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\").size;\n    }\n    [(_FrozenMap_map = new WeakMap(), Symbol.iterator)]() {\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\")[Symbol.iterator]();\n    }\n    entries() {\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\").entries();\n    }\n    forEach(callbackfn, thisArg) {\n        // We have to wrap the specified callback in order to prevent it from\n        // receiving a reference to the inner map.\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\").forEach((value, key, _map) => callbackfn.call(thisArg, value, key, this));\n    }\n    get(key) {\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\").get(key);\n    }\n    has(key) {\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\").has(key);\n    }\n    keys() {\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\").keys();\n    }\n    values() {\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\").values();\n    }\n    toString() {\n        return `FrozenMap(${this.size}) {${this.size > 0\n            ? ` ${[...this.entries()]\n                .map(([key, value]) => `${String(key)} => ${String(value)}`)\n                .join(', ')} `\n            : ''}}`;\n    }\n}\nexports.FrozenMap = FrozenMap;\n/**\n * A {@link ReadonlySet} that cannot be modified after instantiation.\n * The implementation uses an inner set hidden via a private field, and the\n * immutability guarantee relies on it being impossible to get a reference\n * to this set.\n */\nclass FrozenSet {\n    constructor(values) {\n        _FrozenSet_set.set(this, void 0);\n        __classPrivateFieldSet(this, _FrozenSet_set, new Set(values), \"f\");\n        Object.freeze(this);\n    }\n    get size() {\n        return __classPrivateFieldGet(this, _FrozenSet_set, \"f\").size;\n    }\n    [(_FrozenSet_set = new WeakMap(), Symbol.iterator)]() {\n        return __classPrivateFieldGet(this, _FrozenSet_set, \"f\")[Symbol.iterator]();\n    }\n    entries() {\n        return __classPrivateFieldGet(this, _FrozenSet_set, \"f\").entries();\n    }\n    forEach(callbackfn, thisArg) {\n        // We have to wrap the specified callback in order to prevent it from\n        // receiving a reference to the inner set.\n        return __classPrivateFieldGet(this, _FrozenSet_set, \"f\").forEach((value, value2, _set) => callbackfn.call(thisArg, value, value2, this));\n    }\n    has(value) {\n        return __classPrivateFieldGet(this, _FrozenSet_set, \"f\").has(value);\n    }\n    keys() {\n        return __classPrivateFieldGet(this, _FrozenSet_set, \"f\").keys();\n    }\n    values() {\n        return __classPrivateFieldGet(this, _FrozenSet_set, \"f\").values();\n    }\n    toString() {\n        return `FrozenSet(${this.size}) {${this.size > 0\n            ? ` ${[...this.values()].map((member) => String(member)).join(', ')} `\n            : ''}}`;\n    }\n}\nexports.FrozenSet = FrozenSet;\nObject.freeze(FrozenMap);\nObject.freeze(FrozenMap.prototype);\nObject.freeze(FrozenSet);\nObject.freeze(FrozenSet.prototype);\n//# sourceMappingURL=collections.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=encryption-types.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.remove0x = exports.add0x = exports.assertIsStrictHexString = exports.assertIsHexString = exports.isStrictHexString = exports.isHexString = exports.StrictHexStruct = exports.HexStruct = void 0;\nconst superstruct_1 = require(\"superstruct\");\nconst assert_1 = require(\"./assert\");\nexports.HexStruct = (0, superstruct_1.pattern)((0, superstruct_1.string)(), /^(?:0x)?[0-9a-f]+$/iu);\nexports.StrictHexStruct = (0, superstruct_1.pattern)((0, superstruct_1.string)(), /^0x[0-9a-f]+$/iu);\n/**\n * Check if a string is a valid hex string.\n *\n * @param value - The value to check.\n * @returns Whether the value is a valid hex string.\n */\nfunction isHexString(value) {\n    return (0, superstruct_1.is)(value, exports.HexStruct);\n}\nexports.isHexString = isHexString;\n/**\n * Strictly check if a string is a valid hex string. A valid hex string must\n * start with the \"0x\"-prefix.\n *\n * @param value - The value to check.\n * @returns Whether the value is a valid hex string.\n */\nfunction isStrictHexString(value) {\n    return (0, superstruct_1.is)(value, exports.StrictHexStruct);\n}\nexports.isStrictHexString = isStrictHexString;\n/**\n * Assert that a value is a valid hex string.\n *\n * @param value - The value to check.\n * @throws If the value is not a valid hex string.\n */\nfunction assertIsHexString(value) {\n    (0, assert_1.assert)(isHexString(value), 'Value must be a hexadecimal string.');\n}\nexports.assertIsHexString = assertIsHexString;\n/**\n * Assert that a value is a valid hex string. A valid hex string must start with\n * the \"0x\"-prefix.\n *\n * @param value - The value to check.\n * @throws If the value is not a valid hex string.\n */\nfunction assertIsStrictHexString(value) {\n    (0, assert_1.assert)(isStrictHexString(value), 'Value must be a hexadecimal string, starting with \"0x\".');\n}\nexports.assertIsStrictHexString = assertIsStrictHexString;\n/**\n * Add the `0x`-prefix to a hexadecimal string. If the string already has the\n * prefix, it is returned as-is.\n *\n * @param hexadecimal - The hexadecimal string to add the prefix to.\n * @returns The prefixed hexadecimal string.\n */\nfunction add0x(hexadecimal) {\n    if (hexadecimal.startsWith('0x')) {\n        return hexadecimal;\n    }\n    if (hexadecimal.startsWith('0X')) {\n        return `0x${hexadecimal.substring(2)}`;\n    }\n    return `0x${hexadecimal}`;\n}\nexports.add0x = add0x;\n/**\n * Remove the `0x`-prefix from a hexadecimal string. If the string doesn't have\n * the prefix, it is returned as-is.\n *\n * @param hexadecimal - The hexadecimal string to remove the prefix from.\n * @returns The un-prefixed hexadecimal string.\n */\nfunction remove0x(hexadecimal) {\n    if (hexadecimal.startsWith('0x') || hexadecimal.startsWith('0X')) {\n        return hexadecimal.substring(2);\n    }\n    return hexadecimal;\n}\nexports.remove0x = remove0x;\n//# sourceMappingURL=hex.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./assert\"), exports);\n__exportStar(require(\"./base64\"), exports);\n__exportStar(require(\"./bytes\"), exports);\n__exportStar(require(\"./checksum\"), exports);\n__exportStar(require(\"./coercers\"), exports);\n__exportStar(require(\"./collections\"), exports);\n__exportStar(require(\"./encryption-types\"), exports);\n__exportStar(require(\"./hex\"), exports);\n__exportStar(require(\"./json\"), exports);\n__exportStar(require(\"./keyring\"), exports);\n__exportStar(require(\"./logging\"), exports);\n__exportStar(require(\"./misc\"), exports);\n__exportStar(require(\"./number\"), exports);\n__exportStar(require(\"./opaque\"), exports);\n__exportStar(require(\"./time\"), exports);\n__exportStar(require(\"./transaction-types\"), exports);\n__exportStar(require(\"./versions\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getJsonRpcIdValidator = exports.assertIsJsonRpcError = exports.isJsonRpcError = exports.assertIsJsonRpcFailure = exports.isJsonRpcFailure = exports.assertIsJsonRpcSuccess = exports.isJsonRpcSuccess = exports.assertIsJsonRpcResponse = exports.isJsonRpcResponse = exports.assertIsPendingJsonRpcResponse = exports.isPendingJsonRpcResponse = exports.JsonRpcResponseStruct = exports.JsonRpcFailureStruct = exports.JsonRpcSuccessStruct = exports.PendingJsonRpcResponseStruct = exports.assertIsJsonRpcRequest = exports.isJsonRpcRequest = exports.assertIsJsonRpcNotification = exports.isJsonRpcNotification = exports.JsonRpcNotificationStruct = exports.JsonRpcRequestStruct = exports.JsonRpcParamsStruct = exports.JsonRpcErrorStruct = exports.JsonRpcIdStruct = exports.JsonRpcVersionStruct = exports.jsonrpc2 = exports.getJsonSize = exports.isValidJson = exports.JsonStruct = exports.UnsafeJsonStruct = void 0;\nconst superstruct_1 = require(\"superstruct\");\nconst assert_1 = require(\"./assert\");\n/**\n * A struct to check if the given value is finite number. Superstruct's\n * `number()` struct does not check if the value is finite.\n *\n * @returns A struct to check if the given value is finite number.\n */\nconst finiteNumber = () => (0, superstruct_1.define)('finite number', (value) => {\n    return (0, superstruct_1.is)(value, (0, superstruct_1.number)()) && Number.isFinite(value);\n});\n/**\n * A struct to check if the given value is a valid JSON-serializable value.\n *\n * Note that this struct is unsafe. For safe validation, use {@link JsonStruct}.\n */\n// We cannot infer the type of the struct, because it is recursive.\nexports.UnsafeJsonStruct = (0, superstruct_1.union)([\n    (0, superstruct_1.literal)(null),\n    (0, superstruct_1.boolean)(),\n    finiteNumber(),\n    (0, superstruct_1.string)(),\n    (0, superstruct_1.array)((0, superstruct_1.lazy)(() => exports.UnsafeJsonStruct)),\n    (0, superstruct_1.record)((0, superstruct_1.string)(), (0, superstruct_1.lazy)(() => exports.UnsafeJsonStruct)),\n]);\n/**\n * A struct to check if the given value is a valid JSON-serializable value.\n *\n * This struct sanitizes the value before validating it, so that it is safe to\n * use with untrusted input.\n */\nexports.JsonStruct = (0, superstruct_1.define)('Json', (value, context) => {\n    /**\n     * Helper function that runs the given struct validator and returns the\n     * validation errors, if any. If the value is valid, it returns `true`.\n     *\n     * @param innerValue - The value to validate.\n     * @param struct - The struct to use for validation.\n     * @returns The validation errors, or `true` if the value is valid.\n     */\n    function checkStruct(innerValue, struct) {\n        const iterator = struct.validator(innerValue, context);\n        const errors = [...iterator];\n        if (errors.length > 0) {\n            return errors;\n        }\n        return true;\n    }\n    try {\n        // The plain value must be a valid JSON value, but it may be altered in the\n        // process of JSON serialization, so we need to validate it again after\n        // serialization. This has the added benefit that the returned error messages\n        // will be more helpful, as they will point to the exact location of the\n        // invalid value.\n        //\n        // This seems overcomplicated, but without checking the plain value first,\n        // there are some cases where the validation passes, even though the value is\n        // not valid JSON. For example, `undefined` is not valid JSON, but serializing\n        // it will remove it from the object, so the validation will pass.\n        const unsafeResult = checkStruct(value, exports.UnsafeJsonStruct);\n        if (unsafeResult !== true) {\n            return unsafeResult;\n        }\n        // JavaScript engines are highly optimized for this specific use case of\n        // JSON parsing and stringifying, so there should be no performance impact.\n        return checkStruct(JSON.parse(JSON.stringify(value)), exports.UnsafeJsonStruct);\n    }\n    catch (error) {\n        if (error instanceof RangeError) {\n            return 'Circular reference detected';\n        }\n        return false;\n    }\n});\n/**\n * Check if the given value is a valid {@link Json} value, i.e., a value that is\n * serializable to JSON.\n *\n * @param value - The value to check.\n * @returns Whether the value is a valid {@link Json} value.\n */\nfunction isValidJson(value) {\n    return (0, superstruct_1.is)(value, exports.JsonStruct);\n}\nexports.isValidJson = isValidJson;\n/**\n * Get the size of a JSON value in bytes. This also validates the value.\n *\n * @param value - The JSON value to get the size of.\n * @returns The size of the JSON value in bytes.\n */\nfunction getJsonSize(value) {\n    (0, assert_1.assertStruct)(value, exports.JsonStruct, 'Invalid JSON value');\n    const json = JSON.stringify(value);\n    return new TextEncoder().encode(json).byteLength;\n}\nexports.getJsonSize = getJsonSize;\n/**\n * The string '2.0'.\n */\nexports.jsonrpc2 = '2.0';\nexports.JsonRpcVersionStruct = (0, superstruct_1.literal)(exports.jsonrpc2);\nexports.JsonRpcIdStruct = (0, superstruct_1.nullable)((0, superstruct_1.union)([(0, superstruct_1.number)(), (0, superstruct_1.string)()]));\nexports.JsonRpcErrorStruct = (0, superstruct_1.object)({\n    code: (0, superstruct_1.integer)(),\n    message: (0, superstruct_1.string)(),\n    data: (0, superstruct_1.optional)(exports.JsonStruct),\n    stack: (0, superstruct_1.optional)((0, superstruct_1.string)()),\n});\nexports.JsonRpcParamsStruct = (0, superstruct_1.optional)((0, superstruct_1.union)([(0, superstruct_1.record)((0, superstruct_1.string)(), exports.JsonStruct), (0, superstruct_1.array)(exports.JsonStruct)]));\nexports.JsonRpcRequestStruct = (0, superstruct_1.object)({\n    id: exports.JsonRpcIdStruct,\n    jsonrpc: exports.JsonRpcVersionStruct,\n    method: (0, superstruct_1.string)(),\n    params: exports.JsonRpcParamsStruct,\n});\nexports.JsonRpcNotificationStruct = (0, superstruct_1.omit)(exports.JsonRpcRequestStruct, ['id']);\n/**\n * Check if the given value is a valid {@link JsonRpcNotification} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcNotification}\n * object.\n */\nfunction isJsonRpcNotification(value) {\n    return (0, superstruct_1.is)(value, exports.JsonRpcNotificationStruct);\n}\nexports.isJsonRpcNotification = isJsonRpcNotification;\n/**\n * Assert that the given value is a valid {@link JsonRpcNotification} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcNotification} object.\n */\nfunction assertIsJsonRpcNotification(value, \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper) {\n    (0, assert_1.assertStruct)(value, exports.JsonRpcNotificationStruct, 'Invalid JSON-RPC notification', ErrorWrapper);\n}\nexports.assertIsJsonRpcNotification = assertIsJsonRpcNotification;\n/**\n * Check if the given value is a valid {@link JsonRpcRequest} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcRequest} object.\n */\nfunction isJsonRpcRequest(value) {\n    return (0, superstruct_1.is)(value, exports.JsonRpcRequestStruct);\n}\nexports.isJsonRpcRequest = isJsonRpcRequest;\n/**\n * Assert that the given value is a valid {@link JsonRpcRequest} object.\n *\n * @param value - The JSON-RPC request or notification to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcRequest} object.\n */\nfunction assertIsJsonRpcRequest(value, \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper) {\n    (0, assert_1.assertStruct)(value, exports.JsonRpcRequestStruct, 'Invalid JSON-RPC request', ErrorWrapper);\n}\nexports.assertIsJsonRpcRequest = assertIsJsonRpcRequest;\nexports.PendingJsonRpcResponseStruct = (0, superstruct_1.object)({\n    id: exports.JsonRpcIdStruct,\n    jsonrpc: exports.JsonRpcVersionStruct,\n    result: (0, superstruct_1.optional)((0, superstruct_1.unknown)()),\n    error: (0, superstruct_1.optional)(exports.JsonRpcErrorStruct),\n});\nexports.JsonRpcSuccessStruct = (0, superstruct_1.object)({\n    id: exports.JsonRpcIdStruct,\n    jsonrpc: exports.JsonRpcVersionStruct,\n    result: exports.JsonStruct,\n});\nexports.JsonRpcFailureStruct = (0, superstruct_1.object)({\n    id: exports.JsonRpcIdStruct,\n    jsonrpc: exports.JsonRpcVersionStruct,\n    error: exports.JsonRpcErrorStruct,\n});\nexports.JsonRpcResponseStruct = (0, superstruct_1.union)([\n    exports.JsonRpcSuccessStruct,\n    exports.JsonRpcFailureStruct,\n]);\n/**\n * Type guard to check whether specified JSON-RPC response is a\n * {@link PendingJsonRpcResponse}.\n *\n * @param response - The JSON-RPC response to check.\n * @returns Whether the specified JSON-RPC response is pending.\n */\nfunction isPendingJsonRpcResponse(response) {\n    return (0, superstruct_1.is)(response, exports.PendingJsonRpcResponseStruct);\n}\nexports.isPendingJsonRpcResponse = isPendingJsonRpcResponse;\n/**\n * Assert that the given value is a valid {@link PendingJsonRpcResponse} object.\n *\n * @param response - The JSON-RPC response to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link PendingJsonRpcResponse}\n * object.\n */\nfunction assertIsPendingJsonRpcResponse(response, \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper) {\n    (0, assert_1.assertStruct)(response, exports.PendingJsonRpcResponseStruct, 'Invalid pending JSON-RPC response', ErrorWrapper);\n}\nexports.assertIsPendingJsonRpcResponse = assertIsPendingJsonRpcResponse;\n/**\n * Type guard to check if a value is a {@link JsonRpcResponse}.\n *\n * @param response - The object to check.\n * @returns Whether the object is a JsonRpcResponse.\n */\nfunction isJsonRpcResponse(response) {\n    return (0, superstruct_1.is)(response, exports.JsonRpcResponseStruct);\n}\nexports.isJsonRpcResponse = isJsonRpcResponse;\n/**\n * Assert that the given value is a valid {@link JsonRpcResponse} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcResponse} object.\n */\nfunction assertIsJsonRpcResponse(value, \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper) {\n    (0, assert_1.assertStruct)(value, exports.JsonRpcResponseStruct, 'Invalid JSON-RPC response', ErrorWrapper);\n}\nexports.assertIsJsonRpcResponse = assertIsJsonRpcResponse;\n/**\n * Check if the given value is a valid {@link JsonRpcSuccess} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcSuccess} object.\n */\nfunction isJsonRpcSuccess(value) {\n    return (0, superstruct_1.is)(value, exports.JsonRpcSuccessStruct);\n}\nexports.isJsonRpcSuccess = isJsonRpcSuccess;\n/**\n * Assert that the given value is a valid {@link JsonRpcSuccess} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcSuccess} object.\n */\nfunction assertIsJsonRpcSuccess(value, \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper) {\n    (0, assert_1.assertStruct)(value, exports.JsonRpcSuccessStruct, 'Invalid JSON-RPC success response', ErrorWrapper);\n}\nexports.assertIsJsonRpcSuccess = assertIsJsonRpcSuccess;\n/**\n * Check if the given value is a valid {@link JsonRpcFailure} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcFailure} object.\n */\nfunction isJsonRpcFailure(value) {\n    return (0, superstruct_1.is)(value, exports.JsonRpcFailureStruct);\n}\nexports.isJsonRpcFailure = isJsonRpcFailure;\n/**\n * Assert that the given value is a valid {@link JsonRpcFailure} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcFailure} object.\n */\nfunction assertIsJsonRpcFailure(value, \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper) {\n    (0, assert_1.assertStruct)(value, exports.JsonRpcFailureStruct, 'Invalid JSON-RPC failure response', ErrorWrapper);\n}\nexports.assertIsJsonRpcFailure = assertIsJsonRpcFailure;\n/**\n * Check if the given value is a valid {@link JsonRpcError} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcError} object.\n */\nfunction isJsonRpcError(value) {\n    return (0, superstruct_1.is)(value, exports.JsonRpcErrorStruct);\n}\nexports.isJsonRpcError = isJsonRpcError;\n/**\n * Assert that the given value is a valid {@link JsonRpcError} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcError} object.\n */\nfunction assertIsJsonRpcError(value, \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper) {\n    (0, assert_1.assertStruct)(value, exports.JsonRpcErrorStruct, 'Invalid JSON-RPC error', ErrorWrapper);\n}\nexports.assertIsJsonRpcError = assertIsJsonRpcError;\n/**\n * Gets a function for validating JSON-RPC request / response `id` values.\n *\n * By manipulating the options of this factory, you can control the behavior\n * of the resulting validator for some edge cases. This is useful because e.g.\n * `null` should sometimes but not always be permitted.\n *\n * Note that the empty string (`''`) is always permitted by the JSON-RPC\n * specification, but that kind of sucks and you may want to forbid it in some\n * instances anyway.\n *\n * For more details, see the\n * [JSON-RPC Specification](https://www.jsonrpc.org/specification).\n *\n * @param options - An options object.\n * @param options.permitEmptyString - Whether the empty string (i.e. `''`)\n * should be treated as a valid ID. Default: `true`\n * @param options.permitFractions - Whether fractional numbers (e.g. `1.2`)\n * should be treated as valid IDs. Default: `false`\n * @param options.permitNull - Whether `null` should be treated as a valid ID.\n * Default: `true`\n * @returns The JSON-RPC ID validator function.\n */\nfunction getJsonRpcIdValidator(options) {\n    const { permitEmptyString, permitFractions, permitNull } = Object.assign({ permitEmptyString: true, permitFractions: false, permitNull: true }, options);\n    /**\n     * Type guard for {@link JsonRpcId}.\n     *\n     * @param id - The JSON-RPC ID value to check.\n     * @returns Whether the given ID is valid per the options given to the\n     * factory.\n     */\n    const isValidJsonRpcId = (id) => {\n        return Boolean((typeof id === 'number' && (permitFractions || Number.isInteger(id))) ||\n            (typeof id === 'string' && (permitEmptyString || id.length > 0)) ||\n            (permitNull && id === null));\n    };\n    return isValidJsonRpcId;\n}\nexports.getJsonRpcIdValidator = getJsonRpcIdValidator;\n//# sourceMappingURL=json.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=keyring.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createModuleLogger = exports.createProjectLogger = void 0;\nconst debug_1 = __importDefault(require(\"debug\"));\nconst globalLogger = (0, debug_1.default)('metamask');\n/**\n * Creates a logger via the `debug` library whose log messages will be tagged\n * using the name of your project. By default, such messages will be\n * suppressed, but you can reveal them by setting the `DEBUG` environment\n * variable to `metamask:<projectName>`. You can also set this variable to\n * `metamask:*` if you want to see log messages from all MetaMask projects that\n * are also using this function to create their loggers.\n *\n * @param projectName - The name of your project. This should be the name of\n * your NPM package if you're developing one.\n * @returns An instance of `debug`.\n */\nfunction createProjectLogger(projectName) {\n    return globalLogger.extend(projectName);\n}\nexports.createProjectLogger = createProjectLogger;\n/**\n * Creates a logger via the `debug` library which is derived from the logger for\n * the whole project whose log messages will be tagged using the name of your\n * module. By default, such messages will be suppressed, but you can reveal them\n * by setting the `DEBUG` environment variable to\n * `metamask:<projectName>:<moduleName>`. You can also set this variable to\n * `metamask:<projectName>:*` if you want to see log messages from the project,\n * or `metamask:*` if you want to see log messages from all MetaMask projects.\n *\n * @param projectLogger - The logger created via {@link createProjectLogger}.\n * @param moduleName - The name of your module. You could use the name of the\n * file where you're using this logger or some other name.\n * @returns An instance of `debug`.\n */\nfunction createModuleLogger(projectLogger, moduleName) {\n    return projectLogger.extend(moduleName);\n}\nexports.createModuleLogger = createModuleLogger;\n//# sourceMappingURL=logging.js.map","\"use strict\";\n//\n// Types\n//\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.calculateNumberSize = exports.calculateStringSize = exports.isASCII = exports.isPlainObject = exports.ESCAPE_CHARACTERS_REGEXP = exports.JsonSize = exports.hasProperty = exports.isObject = exports.isNullOrUndefined = exports.isNonEmptyArray = void 0;\n//\n// Type Guards\n//\n/**\n * A {@link NonEmptyArray} type guard.\n *\n * @template Element - The non-empty array member type.\n * @param value - The value to check.\n * @returns Whether the value is a non-empty array.\n */\nfunction isNonEmptyArray(value) {\n    return Array.isArray(value) && value.length > 0;\n}\nexports.isNonEmptyArray = isNonEmptyArray;\n/**\n * Type guard for \"nullishness\".\n *\n * @param value - Any value.\n * @returns `true` if the value is null or undefined, `false` otherwise.\n */\nfunction isNullOrUndefined(value) {\n    return value === null || value === undefined;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n/**\n * A type guard for {@link RuntimeObject}.\n *\n * @param value - The value to check.\n * @returns Whether the specified value has a runtime type of `object` and is\n * neither `null` nor an `Array`.\n */\nfunction isObject(value) {\n    return Boolean(value) && typeof value === 'object' && !Array.isArray(value);\n}\nexports.isObject = isObject;\n//\n// Other utility functions\n//\n/**\n * A type guard for ensuring an object has a property.\n *\n * @param objectToCheck - The object to check.\n * @param name - The property name to check for.\n * @returns Whether the specified object has an own property with the specified\n * name, regardless of whether it is enumerable or not.\n */\nconst hasProperty = (objectToCheck, name) => Object.hasOwnProperty.call(objectToCheck, name);\nexports.hasProperty = hasProperty;\n/**\n * Predefined sizes (in Bytes) of specific parts of JSON structure.\n */\nvar JsonSize;\n(function (JsonSize) {\n    JsonSize[JsonSize[\"Null\"] = 4] = \"Null\";\n    JsonSize[JsonSize[\"Comma\"] = 1] = \"Comma\";\n    JsonSize[JsonSize[\"Wrapper\"] = 1] = \"Wrapper\";\n    JsonSize[JsonSize[\"True\"] = 4] = \"True\";\n    JsonSize[JsonSize[\"False\"] = 5] = \"False\";\n    JsonSize[JsonSize[\"Quote\"] = 1] = \"Quote\";\n    JsonSize[JsonSize[\"Colon\"] = 1] = \"Colon\";\n    // eslint-disable-next-line @typescript-eslint/no-shadow\n    JsonSize[JsonSize[\"Date\"] = 24] = \"Date\";\n})(JsonSize = exports.JsonSize || (exports.JsonSize = {}));\n/**\n * Regular expression with pattern matching for (special) escaped characters.\n */\nexports.ESCAPE_CHARACTERS_REGEXP = /\"|\\\\|\\n|\\r|\\t/gu;\n/**\n * Check if the value is plain object.\n *\n * @param value - Value to be checked.\n * @returns True if an object is the plain JavaScript object,\n * false if the object is not plain (e.g. function).\n */\nfunction isPlainObject(value) {\n    if (typeof value !== 'object' || value === null) {\n        return false;\n    }\n    try {\n        let proto = value;\n        while (Object.getPrototypeOf(proto) !== null) {\n            proto = Object.getPrototypeOf(proto);\n        }\n        return Object.getPrototypeOf(value) === proto;\n    }\n    catch (_) {\n        return false;\n    }\n}\nexports.isPlainObject = isPlainObject;\n/**\n * Check if character is ASCII.\n *\n * @param character - Character.\n * @returns True if a character code is ASCII, false if not.\n */\nfunction isASCII(character) {\n    return character.charCodeAt(0) <= 127;\n}\nexports.isASCII = isASCII;\n/**\n * Calculate string size.\n *\n * @param value - String value to calculate size.\n * @returns Number of bytes used to store whole string value.\n */\nfunction calculateStringSize(value) {\n    var _a;\n    const size = value.split('').reduce((total, character) => {\n        if (isASCII(character)) {\n            return total + 1;\n        }\n        return total + 2;\n    }, 0);\n    // Also detect characters that need backslash escape\n    return size + ((_a = value.match(exports.ESCAPE_CHARACTERS_REGEXP)) !== null && _a !== void 0 ? _a : []).length;\n}\nexports.calculateStringSize = calculateStringSize;\n/**\n * Calculate size of a number ofter JSON serialization.\n *\n * @param value - Number value to calculate size.\n * @returns Number of bytes used to store whole number in JSON.\n */\nfunction calculateNumberSize(value) {\n    return value.toString().length;\n}\nexports.calculateNumberSize = calculateNumberSize;\n//# sourceMappingURL=misc.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hexToBigInt = exports.hexToNumber = exports.bigIntToHex = exports.numberToHex = void 0;\nconst assert_1 = require(\"./assert\");\nconst hex_1 = require(\"./hex\");\n/**\n * Convert a number to a hexadecimal string. This verifies that the number is a\n * non-negative safe integer.\n *\n * To convert a `bigint` to a hexadecimal string instead, use\n * {@link bigIntToHex}.\n *\n * @example\n * ```typescript\n * numberToHex(0); // '0x0'\n * numberToHex(1); // '0x1'\n * numberToHex(16); // '0x10'\n * ```\n * @param value - The number to convert to a hexadecimal string.\n * @returns The hexadecimal string, with the \"0x\"-prefix.\n * @throws If the number is not a non-negative safe integer.\n */\nconst numberToHex = (value) => {\n    (0, assert_1.assert)(typeof value === 'number', 'Value must be a number.');\n    (0, assert_1.assert)(value >= 0, 'Value must be a non-negative number.');\n    (0, assert_1.assert)(Number.isSafeInteger(value), 'Value is not a safe integer. Use `bigIntToHex` instead.');\n    return (0, hex_1.add0x)(value.toString(16));\n};\nexports.numberToHex = numberToHex;\n/**\n * Convert a `bigint` to a hexadecimal string. This verifies that the `bigint`\n * is a non-negative integer.\n *\n * To convert a number to a hexadecimal string instead, use {@link numberToHex}.\n *\n * @example\n * ```typescript\n * bigIntToHex(0n); // '0x0'\n * bigIntToHex(1n); // '0x1'\n * bigIntToHex(16n); // '0x10'\n * ```\n * @param value - The `bigint` to convert to a hexadecimal string.\n * @returns The hexadecimal string, with the \"0x\"-prefix.\n * @throws If the `bigint` is not a non-negative integer.\n */\nconst bigIntToHex = (value) => {\n    (0, assert_1.assert)(typeof value === 'bigint', 'Value must be a bigint.');\n    (0, assert_1.assert)(value >= 0, 'Value must be a non-negative bigint.');\n    return (0, hex_1.add0x)(value.toString(16));\n};\nexports.bigIntToHex = bigIntToHex;\n/**\n * Convert a hexadecimal string to a number. This verifies that the string is a\n * valid hex string, and that the resulting number is a safe integer. Both\n * \"0x\"-prefixed and unprefixed strings are supported.\n *\n * To convert a hexadecimal string to a `bigint` instead, use\n * {@link hexToBigInt}.\n *\n * @example\n * ```typescript\n * hexToNumber('0x0'); // 0\n * hexToNumber('0x1'); // 1\n * hexToNumber('0x10'); // 16\n * ```\n * @param value - The hexadecimal string to convert to a number.\n * @returns The number.\n * @throws If the value is not a valid hexadecimal string, or if the resulting\n * number is not a safe integer.\n */\nconst hexToNumber = (value) => {\n    (0, hex_1.assertIsHexString)(value);\n    // `parseInt` accepts values without the \"0x\"-prefix, whereas `Number` does\n    // not. Using this is slightly faster than `Number(add0x(value))`.\n    const numberValue = parseInt(value, 16);\n    (0, assert_1.assert)(Number.isSafeInteger(numberValue), 'Value is not a safe integer. Use `hexToBigInt` instead.');\n    return numberValue;\n};\nexports.hexToNumber = hexToNumber;\n/**\n * Convert a hexadecimal string to a `bigint`. This verifies that the string is\n * a valid hex string. Both \"0x\"-prefixed and unprefixed strings are supported.\n *\n * To convert a hexadecimal string to a number instead, use {@link hexToNumber}.\n *\n * @example\n * ```typescript\n * hexToBigInt('0x0'); // 0n\n * hexToBigInt('0x1'); // 1n\n * hexToBigInt('0x10'); // 16n\n * ```\n * @param value - The hexadecimal string to convert to a `bigint`.\n * @returns The `bigint`.\n * @throws If the value is not a valid hexadecimal string.\n */\nconst hexToBigInt = (value) => {\n    (0, hex_1.assertIsHexString)(value);\n    // The `BigInt` constructor requires the \"0x\"-prefix to parse a hex string.\n    return BigInt((0, hex_1.add0x)(value));\n};\nexports.hexToBigInt = hexToBigInt;\n//# sourceMappingURL=number.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=opaque.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.timeSince = exports.inMilliseconds = exports.Duration = void 0;\n/**\n * Common duration constants, in milliseconds.\n */\nvar Duration;\n(function (Duration) {\n    /**\n     * A millisecond.\n     */\n    Duration[Duration[\"Millisecond\"] = 1] = \"Millisecond\";\n    /**\n     * A second, in milliseconds.\n     */\n    Duration[Duration[\"Second\"] = 1000] = \"Second\";\n    /**\n     * A minute, in milliseconds.\n     */\n    Duration[Duration[\"Minute\"] = 60000] = \"Minute\";\n    /**\n     * An hour, in milliseconds.\n     */\n    Duration[Duration[\"Hour\"] = 3600000] = \"Hour\";\n    /**\n     * A day, in milliseconds.\n     */\n    Duration[Duration[\"Day\"] = 86400000] = \"Day\";\n    /**\n     * A week, in milliseconds.\n     */\n    Duration[Duration[\"Week\"] = 604800000] = \"Week\";\n    /**\n     * A year, in milliseconds.\n     */\n    Duration[Duration[\"Year\"] = 31536000000] = \"Year\";\n})(Duration = exports.Duration || (exports.Duration = {}));\nconst isNonNegativeInteger = (number) => Number.isInteger(number) && number >= 0;\nconst assertIsNonNegativeInteger = (number, name) => {\n    if (!isNonNegativeInteger(number)) {\n        throw new Error(`\"${name}\" must be a non-negative integer. Received: \"${number}\".`);\n    }\n};\n/**\n * Calculates the millisecond value of the specified number of units of time.\n *\n * @param count - The number of units of time.\n * @param duration - The unit of time to count.\n * @returns The count multiplied by the specified duration.\n */\nfunction inMilliseconds(count, duration) {\n    assertIsNonNegativeInteger(count, 'count');\n    return count * duration;\n}\nexports.inMilliseconds = inMilliseconds;\n/**\n * Gets the milliseconds since a particular Unix epoch timestamp.\n *\n * @param timestamp - A Unix millisecond timestamp.\n * @returns The number of milliseconds elapsed since the specified timestamp.\n */\nfunction timeSince(timestamp) {\n    assertIsNonNegativeInteger(timestamp, 'timestamp');\n    return Date.now() - timestamp;\n}\nexports.timeSince = timeSince;\n//# sourceMappingURL=time.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=transaction-types.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.satisfiesVersionRange = exports.gtRange = exports.gtVersion = exports.assertIsSemVerRange = exports.assertIsSemVerVersion = exports.isValidSemVerRange = exports.isValidSemVerVersion = exports.VersionRangeStruct = exports.VersionStruct = void 0;\nconst semver_1 = require(\"semver\");\nconst superstruct_1 = require(\"superstruct\");\nconst assert_1 = require(\"./assert\");\n/**\n * A struct for validating a version string.\n */\nexports.VersionStruct = (0, superstruct_1.refine)((0, superstruct_1.string)(), 'Version', (value) => {\n    if ((0, semver_1.valid)(value) === null) {\n        return `Expected SemVer version, got \"${value}\"`;\n    }\n    return true;\n});\nexports.VersionRangeStruct = (0, superstruct_1.refine)((0, superstruct_1.string)(), 'Version range', (value) => {\n    if ((0, semver_1.validRange)(value) === null) {\n        return `Expected SemVer range, got \"${value}\"`;\n    }\n    return true;\n});\n/**\n * Checks whether a SemVer version is valid.\n *\n * @param version - A potential version.\n * @returns `true` if the version is valid, and `false` otherwise.\n */\nfunction isValidSemVerVersion(version) {\n    return (0, superstruct_1.is)(version, exports.VersionStruct);\n}\nexports.isValidSemVerVersion = isValidSemVerVersion;\n/**\n * Checks whether a SemVer version range is valid.\n *\n * @param versionRange - A potential version range.\n * @returns `true` if the version range is valid, and `false` otherwise.\n */\nfunction isValidSemVerRange(versionRange) {\n    return (0, superstruct_1.is)(versionRange, exports.VersionRangeStruct);\n}\nexports.isValidSemVerRange = isValidSemVerRange;\n/**\n * Asserts that a value is a valid concrete SemVer version.\n *\n * @param version - A potential SemVer concrete version.\n */\nfunction assertIsSemVerVersion(version) {\n    (0, assert_1.assertStruct)(version, exports.VersionStruct);\n}\nexports.assertIsSemVerVersion = assertIsSemVerVersion;\n/**\n * Asserts that a value is a valid SemVer range.\n *\n * @param range - A potential SemVer range.\n */\nfunction assertIsSemVerRange(range) {\n    (0, assert_1.assertStruct)(range, exports.VersionRangeStruct);\n}\nexports.assertIsSemVerRange = assertIsSemVerRange;\n/**\n * Checks whether a SemVer version is greater than another.\n *\n * @param version1 - The left-hand version.\n * @param version2 - The right-hand version.\n * @returns `version1 > version2`.\n */\nfunction gtVersion(version1, version2) {\n    return (0, semver_1.gt)(version1, version2);\n}\nexports.gtVersion = gtVersion;\n/**\n * Checks whether a SemVer version is greater than all possibilities in a range.\n *\n * @param version - A SemvVer version.\n * @param range - The range to check against.\n * @returns `version > range`.\n */\nfunction gtRange(version, range) {\n    return (0, semver_1.gtr)(version, range);\n}\nexports.gtRange = gtRange;\n/**\n * Returns whether a SemVer version satisfies a SemVer range.\n *\n * @param version - The SemVer version to check.\n * @param versionRange - The SemVer version range to check against.\n * @returns Whether the version satisfied the version range.\n */\nfunction satisfiesVersionRange(version, versionRange) {\n    return (0, semver_1.satisfies)(version, versionRange, {\n        includePrerelease: true,\n    });\n}\nexports.satisfiesVersionRange = satisfiesVersionRange;\n//# sourceMappingURL=versions.js.map"],"names":["Object","defineProperty","exports","value","BasePostMessageStream","readable_stream_1","noop","SYN","ACK","Duplex","constructor","super","objectMode","this","_init","_haveSyn","_log","_handshake","_write","cork","_onData","data","push","err","emit","uncork","_read","_encoding","cb","_postMessage","_setLogger","log","WebWorkerParentPostMessageStream","BasePostMessageStream_1","utils_1","worker","_target","DEDICATED_WORKER_NAME","_worker","onmessage","_onMessage","bind","postMessage","target","event","message","isValidStreamMessage","_destroy","WebWorkerPostMessageStream","self","WorkerGlobalScope","Error","_name","addEventListener","__createBinding","create","o","m","k","k2","undefined","enumerable","get","__exportStar","p","prototype","hasOwnProperty","call","_BrowserRuntimePostMessageStream_name","_BrowserRuntimePostMessageStream_target","__classPrivateFieldSet","receiver","state","kind","f","TypeError","has","set","__classPrivateFieldGet","BrowserRuntimePostMessageStream","name","_getRuntime","onMessage","addListener","sendMessage","_a","_b","globalThis","chrome","runtime","browser","removeListener","WeakMap","isObject","Boolean","WindowPostMessageStream","utils_2","getSource","getOwnPropertyDescriptor","MessageEvent","assert","getOrigin","targetOrigin","location","origin","targetWindow","window","_targetOrigin","_targetWindow","removeEventListener","assertExhaustive","assertStruct","AssertionError","superstruct_1","getError","ErrorWrapper","fn","isConstructable","options","code","struct","errorPrefix","error","isErrorWithMessage","String","endsWith","slice","getErrorMessage","_object","base64","assert_1","paddingRequired","characterSet","letters","re","raw","RegExp","pattern","createDataView","concatBytes","valueToBytes","stringToBytes","numberToBytes","signedBigIntToBytes","bigIntToBytes","hexToBytes","bytesToString","bytesToNumber","bytesToSignedBigInt","bytesToBigInt","bytesToHex","assertIsBytes","isBytes","hex_1","HEX_MINIMUM_NUMBER_CHARACTER","HEX_MAXIMUM_NUMBER_CHARACTER","HEX_CHARACTER_OFFSET","getPrecomputedHexValues","lookupTable","length","i","toString","padStart","getPrecomputedHexValuesBuilder","Uint8Array","bytes","hexadecimal","Array","add0x","join","BigInt","toLowerCase","assertIsHexString","strippedValue","remove0x","normalizedValue","c1","charCodeAt","c2","n1","n2","Number","isSafeInteger","TextEncoder","encode","startsWith","byte","asIntN","bigint","MAX_SAFE_INTEGER","TextDecoder","decode","byteLength","mask","bigIntFits","numberValue","asUintN","reverse","values","normalizedValues","offset","Buffer","buffer","byteOffset","DataView","ChecksumStruct","base64_1","size","string","createHex","createBytes","createBigInt","createNumber","bytes_1","NumberLikeStruct","union","number","StrictHexStruct","NumberCoercer","coerce","BigIntCoercer","BytesCoercer","instance","HexCoercer","result","isFinite","StructError","_FrozenMap_map","_FrozenSet_set","FrozenSet","FrozenMap","entries","Map","freeze","Symbol","iterator","forEach","callbackfn","thisArg","key","_map","keys","map","Set","value2","_set","member","assertIsStrictHexString","isStrictHexString","isHexString","HexStruct","is","substring","desc","__esModule","writable","configurable","getJsonRpcIdValidator","assertIsJsonRpcError","isJsonRpcError","assertIsJsonRpcFailure","isJsonRpcFailure","assertIsJsonRpcSuccess","isJsonRpcSuccess","assertIsJsonRpcResponse","isJsonRpcResponse","assertIsPendingJsonRpcResponse","isPendingJsonRpcResponse","JsonRpcResponseStruct","JsonRpcFailureStruct","JsonRpcSuccessStruct","PendingJsonRpcResponseStruct","assertIsJsonRpcRequest","isJsonRpcRequest","assertIsJsonRpcNotification","isJsonRpcNotification","JsonRpcNotificationStruct","JsonRpcRequestStruct","JsonRpcParamsStruct","JsonRpcErrorStruct","JsonRpcIdStruct","JsonRpcVersionStruct","jsonrpc2","getJsonSize","isValidJson","JsonStruct","UnsafeJsonStruct","literal","boolean","define","array","lazy","record","context","checkStruct","innerValue","errors","validator","unsafeResult","JSON","parse","stringify","RangeError","json","nullable","object","integer","optional","stack","id","jsonrpc","method","params","omit","unknown","response","permitEmptyString","permitFractions","permitNull","assign","isInteger","__importDefault","mod","createModuleLogger","createProjectLogger","globalLogger","default","projectName","extend","projectLogger","moduleName","calculateNumberSize","calculateStringSize","isASCII","isPlainObject","ESCAPE_CHARACTERS_REGEXP","JsonSize","hasProperty","isNullOrUndefined","isNonEmptyArray","isArray","character","objectToCheck","proto","getPrototypeOf","_","split","reduce","total","match","hexToBigInt","hexToNumber","bigIntToHex","numberToHex","parseInt","timeSince","inMilliseconds","Duration","assertIsNonNegativeInteger","isNonNegativeInteger","count","duration","timestamp","Date","now","satisfiesVersionRange","gtRange","gtVersion","assertIsSemVerRange","assertIsSemVerVersion","isValidSemVerRange","isValidSemVerVersion","VersionRangeStruct","VersionStruct","semver_1","refine","valid","validRange","version","versionRange","range","version1","version2","gt","gtr","satisfies","includePrerelease"],"sourceRoot":""}